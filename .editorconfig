[*.cs]

# Order modifiers
csharp_preferred_modifier_order = public, private, protected, internal, file, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, required, volatile, async
csharp_prefer_static_local_function = true:suggestion


csharp_style_inlined_variable_declaration = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion
csharp_style_prefer_local_over_anonymous_function = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_prefer_index_operator = true:suggestion
csharp_style_prefer_range_operator = true:suggestion
csharp_style_prefer_utf8_string_literals = true:suggestion
csharp_style_prefer_top_level_statements = true:silent
csharp_style_prefer_method_group_conversion = true:silent
csharp_style_implicit_object_creation_when_type_is_apparent = true:suggestion
csharp_style_prefer_tuple_swap = true:suggestion
csharp_style_namespace_declarations = block_scoped:silent
csharp_style_throw_expression = true:suggestion
# Это какая-то фигня, не понял зачем нужно
## Violates IDE0150.
##if (numbers is not IEnumerable<int>) ...
## Fixed code.
##if (numbers is null) ...
csharp_style_prefer_null_check_over_type_check = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
csharp_style_var_for_built_in_types = false
csharp_style_var_when_type_is_apparent = true:silent
csharp_style_var_elsewhere = true

csharp_style_expression_bodied_constructors = false:warning
csharp_style_expression_bodied_methods = when_on_single_line:suggestion
csharp_style_expression_bodied_operators = when_on_single_line:suggestion
csharp_style_expression_bodied_properties = when_on_single_line:suggestion
csharp_style_expression_bodied_indexers = when_on_single_line:suggestion
csharp_style_expression_bodied_accessors = when_on_single_line:suggestion
csharp_style_expression_bodied_lambdas = when_on_single_line:suggestion
csharp_style_expression_bodied_local_functions = when_on_single_line:suggestion

csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_prefer_switch_expression = true:suggestion
csharp_style_prefer_pattern_matching = true:suggestion
csharp_style_prefer_not_pattern = true:suggestion
csharp_style_prefer_extended_property_pattern = true:suggestion
csharp_style_prefer_readonly_struct = true:suggestion
csharp_style_allow_embedded_statements_on_same_line_experimental = true:silent
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true:silent
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true:silent
csharp_prefer_braces = true:silent
csharp_prefer_simple_using_statement = true:suggestion
csharp_using_directive_placement = outside_namespace:silent
file_header_template = unset

csharp_style_unused_value_expression_statement_preference = discard_variable:silent
csharp_style_unused_value_assignment_preference = discard_variable:suggestion
dotnet_code_quality_unused_parameters = all:suggestion
#нужно чекнуть чтобы это не затронуло платформенный код
dotnet_remove_unnecessary_suppression_exclusions = all:suggestion
dotnet_sort_system_directives_first = true:suggestion


#new line options
csharp_new_line_before_open_brace = types, methods, properties, events, indexers, local_functions
csharp_new_line_before_else = false
csharp_new_line_before_catch = false
csharp_new_line_before_finally = false
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

#indent
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels= no_change
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents_when_block = false

#space
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_around_binary_operators = before_and_after
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_after_comma = true
csharp_space_before_comma = false
csharp_space_after_dot = false
csharp_space_before_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false
csharp_space_between_parentheses = false

csharp_preserve_single_line_statements = false
csharp_preserve_single_line_blocks = true

# Naming
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_style.camel_case_style.capitalization = camel_case
dotnet_naming_style.interface_i_prefix_style.required_prefix = I


# Pascal Case for Types, Methods, Properties, Events, Delegates, Enums
dotnet_naming_rule.symbols_must_be_capitalized.severity = suggestion
dotnet_naming_rule.symbols_must_be_capitalized.symbols = cap_symbols
dotnet_naming_rule.symbols_must_be_capitalized.style = pascal_case_style
dotnet_naming_symbols.cap_symbols.applicable_kinds = namespace,class,struct,interface,enum,property,method,event,delegate,type_parameter,local_function
dotnet_naming_symbols.cap_symbols.applicable_accessibilities = *

# PascalCase for public fields
dotnet_naming_rule.pascal_case_for_public_fields.severity = suggestion
dotnet_naming_rule.pascal_case_for_public_fields.symbols = public_field
dotnet_naming_rule.pascal_case_for_public_fields.style = pascal_case_style
dotnet_naming_symbols.public_field.applicable_kinds = field
dotnet_naming_symbols.public_field.applicable_accessibilities = public, internal, protected_internal

# PascalCase for constants
dotnet_naming_rule.constants_must_be_capitalized.severity = suggestion
dotnet_naming_rule.constants_must_be_capitalized.symbols = const_cap
dotnet_naming_rule.constants_must_be_capitalized.style = pascal_case_style
dotnet_naming_symbols.const_cap.applicable_kinds = field, local
dotnet_naming_symbols.const_cap.applicable_accessibilities = *
dotnet_naming_symbols.const_cap.required_modifiers = const

# camelCase for private or protected fields
dotnet_naming_rule.pascal_case_for_private_or_protected_fields.severity = suggestion
dotnet_naming_rule.pascal_case_for_private_or_protected_fields.symbols = private_or_protected_field
dotnet_naming_rule.pascal_case_for_private_or_protected_fields.style = camel_case_style
dotnet_naming_symbols.private_or_protected_field.applicable_kinds = field
dotnet_naming_symbols.private_or_protected_field.applicable_accessibilities = private, protected, private_protected
# camelCase for local variables and parameters
dotnet_naming_rule.symbols_must_not_be_capitalized.severity = suggestion
dotnet_naming_rule.symbols_must_not_be_capitalized.symbols = non_cap_symbols
dotnet_naming_rule.symbols_must_not_be_capitalized.style = camel_case_style
dotnet_naming_symbols.non_cap_symbols.applicable_kinds = local,parameter
dotnet_naming_symbols.non_cap_symbols.applicable_accessibilities = *

# interfaces must be prefixed with I
dotnet_naming_rule.interfaces_must_be_prefixed_with_i.severity = suggestion
dotnet_naming_rule.interfaces_must_be_prefixed_with_i.symbols = interface_i_prefix
dotnet_naming_rule.interfaces_must_be_prefixed_with_i.style = interface_i_prefix_style
dotnet_naming_symbols.interface_i_prefix.applicable_kinds = interface
dotnet_naming_symbols.interface_i_prefix.applicable_accessibilities = *

[*.{cs,vb}]
indent_style = tab
end_of_line = lf
indent_size = 4
tab_width = 4
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

dotnet_style_qualification_for_field = false
dotnet_style_qualification_for_property = false
dotnet_style_qualification_for_method = false
dotnet_style_qualification_for_event = false
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion
dotnet_style_require_accessibility_modifiers = always:warning
dotnet_style_readonly_field = true:suggestion
dotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary:silent
dotnet_style_parentheses_in_other_binary_operators = never_if_unnecessary:silent
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:silent
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:silent
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_prefer_auto_properties = true:silent
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = false:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = false:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:silent
dotnet_style_prefer_conditional_expression_over_return = true:silent
dotnet_style_prefer_compound_assignment = true:suggestion
dotnet_style_prefer_simplified_interpolation = true:suggestion
dotnet_style_prefer_simplified_boolean_expressions = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_operator_placement_when_wrapping = end_of_line
#пока так, к сожалению. Надо понять как настроить приемлимый вариант. Если вообще возможно
dotnet_style_namespace_match_folder = false:silent
dotnet_style_allow_multiple_blank_lines_experimental = true:silent
dotnet_style_allow_statement_immediately_after_block_experimental = true:silent